# Some claude magic here âœ¨
diff --git a/dist/esm/client/stdio.js b/dist/esm/client/stdio.js
index 387c982fd40fd8db9790a78e1a05c9ecb81501c0..6da90eb076aadf7a373eacae6908e101055a8202 100644
--- a/dist/esm/client/stdio.js
+++ b/dist/esm/client/stdio.js
@@ -1,5 +1,7 @@
 import { spawn } from "node:child_process";
 import process from "node:process";
+import path from "node:path";
+import fs from "node:fs";
 import { ReadBuffer, serializeMessage } from "../shared/stdio.js";
 /**
  * Environment variables to inherit by default, if an environment is not explicitly given.
@@ -38,6 +40,14 @@ export function getDefaultEnvironment() {
     }
     return env;
 }
+/**
+ * Determines if a command should be run in a shell
+ */
+function shouldUseShell(command) {
+    // List of commands that are likely shell commands or need shell environment
+    const shellCommands = ["bunx", "npx", "yarn", "pnpm", "bun"];
+    return shellCommands.includes(command);
+}
 /**
  * Client transport for stdio: this will connect to a server by spawning a process and communicating with it over stdin/stdout.
  *
@@ -58,25 +68,57 @@ export class StdioClientTransport {
         }
         return new Promise((resolve, reject) => {
             var _a, _b, _c, _d, _e, _f;
+            // Check if command needs to run in a shell
+            const command = this._serverParams.command;
+            const useShell = shouldUseShell(command);
+            
+            // Log for debugging
+            console.log(`Starting MCP command: ${command}, using shell: ${useShell}`);
+
+            // Enhance PATH for Raycast environment
+            const enhancedEnv = (_b = this._serverParams.env) !== null && _b !== void 0 ? _b : getDefaultEnvironment();
+            
+            if (!enhancedEnv.PATH && process.env.PATH) {
+                enhancedEnv.PATH = process.env.PATH;
+            }
+            
+            // Add common binary locations to PATH for Raycast
+            if (process.platform !== "win32") {
+                const additionalPaths = [
+                    "/usr/local/bin",
+                    "/usr/bin", 
+                    "/opt/homebrew/bin",
+                    path.join(process.env.HOME || "", ".bun/bin"),
+                    path.join(process.env.HOME || "", "node_modules/.bin"),
+                    path.join(process.env.HOME || "", ".local/bin"),
+                ];
+                
+                enhancedEnv.PATH = [enhancedEnv.PATH || "", ...additionalPaths].join(":");
+            }
+
             this._process = spawn(this._serverParams.command, (_a = this._serverParams.args) !== null && _a !== void 0 ? _a : [], {
-                env: (_b = this._serverParams.env) !== null && _b !== void 0 ? _b : getDefaultEnvironment(),
+                env: enhancedEnv,
                 stdio: ["pipe", "pipe", (_c = this._serverParams.stderr) !== null && _c !== void 0 ? _c : "inherit"],
-                shell: false,
+                shell: useShell,
                 signal: this._abortController.signal,
                 windowsHide: process.platform === "win32" && isElectron(),
                 cwd: this._serverParams.cwd,
             });
             this._process.on("error", (error) => {
                 var _a, _b;
+                console.error(`Error starting command ${command}:`, error.message);
+                
                 if (error.name === "AbortError") {
                     // Expected when close() is called.
                     (_a = this.onclose) === null || _a === void 0 ? void 0 : _a.call(this);
                     return;
                 }
+                
                 reject(error);
                 (_b = this.onerror) === null || _b === void 0 ? void 0 : _b.call(this, error);
             });
             this._process.on("spawn", () => {
+                console.log(`Successfully spawned command: ${command}`);
                 resolve();
             });
             this._process.on("close", (_code) => {
